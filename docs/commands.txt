# запуск тестовойц БД
docker run -d \
    --name pg \
    -e POSTGRES_PASSWORD=test \
    -e PGDATA=/var/lib/postgresql/data/pgdata \
    -v /home/user/PSB/survey/psqldata:/var/lib/postgresql/data \
    -p 5432:5432 \
    postgres

# настраиваем БД
docker exec -it pg psql -Upostgres -dpostgres
>create database surveys;
>create user test with encrypted password 'test';
>grant all privileges on database surveys to test;
>\q
# connect to DB surveys with user postgres:
docker exec -it pg psql -Upostgres -dsurveys
>grant all on schema public to test;
>\q

# тест
>docker exec -it pg psql -Utest -dsurveys
# вывод всех таблиц в БД
>select * from pg_catalog.pg_tables where schemaname='public';

# интеграционные тесты
#  DeleteCandidate
grpcurl -plaintext -d '{"user_id": 12345}' 127.0.0.1:50051 api.ICHSurvey/DeleteCandidate
#  AddCandidate
grpcurl -plaintext -d '{"user_id": 12345, "first_guestion": 1, "second_guestion": 3}' 127.0.0.1:50051 api.ICHSurvey/AddCandidate
#  StartSurvey
grpcurl -plaintext -d '{"user_id": 12345}' 127.0.0.1:50051 api.ICHSurvey/StartSurvey
#  SetAnswer
grpcurl -plaintext -d '{"user_id": 12345, "answer": "answer 2", "number": 2}' 127.0.0.1:50051 api.ICHSurvey/SetAnswer
#  SetFinishCandidate
grpcurl -plaintext -d '{"user_id": 12345}' 127.0.0.1:50051 api.ICHSurvey/SetFinishCandidate
#  GetSurveyForCandidate
grpcurl -plaintext -d '{"user_id": 12345}' 127.0.0.1:50051 api.ICHSurvey/GetSurveyForCandidate

curl -H "Content-Type: application/json" -X GET http://localhost:8080/v1/start_survey/12345
curl -d '{"answer":"answer", "number":1}'  -H "Content-Type: application/json" -X POST http://localhost:8080/v1/set_answer/12345


###
# задание параметров запуска контейнера swagger
docker pull quay.io/goswagger/swagger
alias swagger='docker run --rm -it -p 8081:8080 --user $(id -u):$(id -g) -e GOPATH=$(go env GOPATH):/go -v $HOME:$HOME -w $(pwd) quay.io/goswagger/swagger'
# генерация кода swagger-сервера
swagger generate server -f swagger/api/api.swagger.json -A swagger
go mod tidy
# запуск сервера swagger
env PORT=8081 go run cmd/swagger-server/main.go
# хапуск документации swagger
swagger serve --no-open -p 8080 swagger/api/api.swagger.json
# генерация доки в формате markdown
swagger generate markdown -f swagger/api/api.swagger.json --output swagger/api/swagger.mode


# info from https://github.com/ankittk/go-grpc-gateway-openapi.git 

git clone https://github.com/swagger-api/swagger-ui.git
copy swagger-ui/dist to project survey (example dir swagger)

