syntax = "proto3";

package api;

option go_package = "./;api";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
//import "protoc-gen-openapiv2/options/annotations.proto";

enum ClassQuestions {
    UNKNOWN_QUESTIONS_CLASS = 0;
    LINUX_QUESTIONS = 1;
    K8S_QUESTIONS = 2;
    NETWORK_QUESTIONS = 3;
    SECURITY_QUESTIONS = 4;
    CONTAINER_QUESTIONS = 5;
    DEVELOPER_QUESTIONS = 6;
}

message UserInfoRequest {
    uint64 user_id = 1;
    uint32 exist_to = 2;
    ClassQuestions base_question = 3;
    ClassQuestions first_guestion = 4;
    ClassQuestions second_guestion = 5;
}

message AnswerRequest {
    uint64 user_id = 1;
    string answer = 2;
    uint32 number = 3;
}

message UserIdRequest {
    uint64 user_id = 1;
}

message Survey {
    uint64 user_id = 1;
    string title = 2;
    string question = 3;
    string latency = 4;
    string answer = 5;
    uint32 number = 6;
}

message SurveyResponse {
    google.protobuf.Timestamp start_survey = 1;
    string  mesage = 2;
    repeated Survey qs = 3;
}

message QuestionResponse {
    uint64 user_id = 1;
    string question = 2;
    uint32 number = 3;
    string message = 4;
}

message StatusResponse {
    string message = 1;
}

// These annotations are used when generating the OpenAPI file.
/*
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {version: "1.0"};
  external_docs: {
    url: "https://github.com/johanbrandhorst/grpc-gateway-boilerplate";
    description: "gRPC-gateway boilerplate repository";
  }
  schemes: HTTP;
};
*/

service ICHSurvey {
    rpc AddCandidate(UserInfoRequest) returns (StatusResponse) {}
    rpc DeleteCandidate(UserIdRequest) returns (StatusResponse) {}

    rpc StartSurvey(UserIdRequest) returns (QuestionResponse) {
        option (google.api.http) = {
            get: "/v1/start_survey/{user_id}"
        };
        /*
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Add a user"
            description: "Add a user to the server."
            tags: "survey"
        };
        */
    }
    rpc SetAnswer(AnswerRequest) returns (QuestionResponse) {
        option (google.api.http) = {
            post: "/v1/set_answer/{user_id}"
            body: "*"
        };
        /*
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Add a user"
            description: "Add a user to the server."
            tags: "survey"
        };
        */
    }

    rpc SetFinishCandidate(UserIdRequest) returns (StatusResponse) {}
    rpc GetSurveyForCandidate(UserIdRequest) returns (SurveyResponse) {}
} 