// Code generated by go-swagger; DO NOT EDIT.

package i_c_h_survey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ICHSurveySetAnswerHandlerFunc turns a function with the right signature into a i c h survey set answer handler
type ICHSurveySetAnswerHandlerFunc func(ICHSurveySetAnswerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ICHSurveySetAnswerHandlerFunc) Handle(params ICHSurveySetAnswerParams) middleware.Responder {
	return fn(params)
}

// ICHSurveySetAnswerHandler interface for that can handle valid i c h survey set answer params
type ICHSurveySetAnswerHandler interface {
	Handle(ICHSurveySetAnswerParams) middleware.Responder
}

// NewICHSurveySetAnswer creates a new http.Handler for the i c h survey set answer operation
func NewICHSurveySetAnswer(ctx *middleware.Context, handler ICHSurveySetAnswerHandler) *ICHSurveySetAnswer {
	return &ICHSurveySetAnswer{Context: ctx, Handler: handler}
}

/*
	ICHSurveySetAnswer swagger:route POST /v1/set_answer/{userId} ICHSurvey iCHSurveySetAnswer

ICHSurveySetAnswer i c h survey set answer API
*/
type ICHSurveySetAnswer struct {
	Context *middleware.Context
	Handler ICHSurveySetAnswerHandler
}

func (o *ICHSurveySetAnswer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewICHSurveySetAnswerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
