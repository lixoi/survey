// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ICHSurveyClient is the client API for ICHSurvey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ICHSurveyClient interface {
	AddCandidate(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	DeleteCandidate(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	StartSurvey(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*QuestionResponse, error)
	SetAnswer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*QuestionResponse, error)
	SetFinishCandidate(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetSurveyForCandidate(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*SurveyResponse, error)
}

type iCHSurveyClient struct {
	cc grpc.ClientConnInterface
}

func NewICHSurveyClient(cc grpc.ClientConnInterface) ICHSurveyClient {
	return &iCHSurveyClient{cc}
}

func (c *iCHSurveyClient) AddCandidate(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ICHSurvey/AddCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCHSurveyClient) DeleteCandidate(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ICHSurvey/DeleteCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCHSurveyClient) StartSurvey(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*QuestionResponse, error) {
	out := new(QuestionResponse)
	err := c.cc.Invoke(ctx, "/api.ICHSurvey/StartSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCHSurveyClient) SetAnswer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*QuestionResponse, error) {
	out := new(QuestionResponse)
	err := c.cc.Invoke(ctx, "/api.ICHSurvey/SetAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCHSurveyClient) SetFinishCandidate(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ICHSurvey/SetFinishCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCHSurveyClient) GetSurveyForCandidate(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*SurveyResponse, error) {
	out := new(SurveyResponse)
	err := c.cc.Invoke(ctx, "/api.ICHSurvey/GetSurveyForCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ICHSurveyServer is the server API for ICHSurvey service.
// All implementations must embed UnimplementedICHSurveyServer
// for forward compatibility
type ICHSurveyServer interface {
	AddCandidate(context.Context, *UserInfoRequest) (*StatusResponse, error)
	DeleteCandidate(context.Context, *UserIdRequest) (*StatusResponse, error)
	StartSurvey(context.Context, *UserIdRequest) (*QuestionResponse, error)
	SetAnswer(context.Context, *AnswerRequest) (*QuestionResponse, error)
	SetFinishCandidate(context.Context, *UserIdRequest) (*StatusResponse, error)
	GetSurveyForCandidate(context.Context, *UserIdRequest) (*SurveyResponse, error)
	mustEmbedUnimplementedICHSurveyServer()
}

// UnimplementedICHSurveyServer must be embedded to have forward compatible implementations.
type UnimplementedICHSurveyServer struct {
}

func (UnimplementedICHSurveyServer) AddCandidate(context.Context, *UserInfoRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCandidate not implemented")
}
func (UnimplementedICHSurveyServer) DeleteCandidate(context.Context, *UserIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCandidate not implemented")
}
func (UnimplementedICHSurveyServer) StartSurvey(context.Context, *UserIdRequest) (*QuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSurvey not implemented")
}
func (UnimplementedICHSurveyServer) SetAnswer(context.Context, *AnswerRequest) (*QuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAnswer not implemented")
}
func (UnimplementedICHSurveyServer) SetFinishCandidate(context.Context, *UserIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFinishCandidate not implemented")
}
func (UnimplementedICHSurveyServer) GetSurveyForCandidate(context.Context, *UserIdRequest) (*SurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyForCandidate not implemented")
}
func (UnimplementedICHSurveyServer) mustEmbedUnimplementedICHSurveyServer() {}

// UnsafeICHSurveyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ICHSurveyServer will
// result in compilation errors.
type UnsafeICHSurveyServer interface {
	mustEmbedUnimplementedICHSurveyServer()
}

func RegisterICHSurveyServer(s grpc.ServiceRegistrar, srv ICHSurveyServer) {
	s.RegisterService(&ICHSurvey_ServiceDesc, srv)
}

func _ICHSurvey_AddCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICHSurveyServer).AddCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ICHSurvey/AddCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICHSurveyServer).AddCandidate(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICHSurvey_DeleteCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICHSurveyServer).DeleteCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ICHSurvey/DeleteCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICHSurveyServer).DeleteCandidate(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICHSurvey_StartSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICHSurveyServer).StartSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ICHSurvey/StartSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICHSurveyServer).StartSurvey(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICHSurvey_SetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICHSurveyServer).SetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ICHSurvey/SetAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICHSurveyServer).SetAnswer(ctx, req.(*AnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICHSurvey_SetFinishCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICHSurveyServer).SetFinishCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ICHSurvey/SetFinishCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICHSurveyServer).SetFinishCandidate(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICHSurvey_GetSurveyForCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICHSurveyServer).GetSurveyForCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ICHSurvey/GetSurveyForCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICHSurveyServer).GetSurveyForCandidate(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ICHSurvey_ServiceDesc is the grpc.ServiceDesc for ICHSurvey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ICHSurvey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ICHSurvey",
	HandlerType: (*ICHSurveyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCandidate",
			Handler:    _ICHSurvey_AddCandidate_Handler,
		},
		{
			MethodName: "DeleteCandidate",
			Handler:    _ICHSurvey_DeleteCandidate_Handler,
		},
		{
			MethodName: "StartSurvey",
			Handler:    _ICHSurvey_StartSurvey_Handler,
		},
		{
			MethodName: "SetAnswer",
			Handler:    _ICHSurvey_SetAnswer_Handler,
		},
		{
			MethodName: "SetFinishCandidate",
			Handler:    _ICHSurvey_SetFinishCandidate_Handler,
		},
		{
			MethodName: "GetSurveyForCandidate",
			Handler:    _ICHSurvey_GetSurveyForCandidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
