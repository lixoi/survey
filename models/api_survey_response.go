// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APISurveyResponse api survey response
//
// swagger:model apiSurveyResponse
type APISurveyResponse struct {

	// mesage
	Mesage string `json:"mesage,omitempty"`

	// qs
	Qs []*APISurvey `json:"qs"`

	// start survey
	// Format: date-time
	StartSurvey strfmt.DateTime `json:"startSurvey,omitempty"`
}

// Validate validates this api survey response
func (m *APISurveyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartSurvey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APISurveyResponse) validateQs(formats strfmt.Registry) error {
	if swag.IsZero(m.Qs) { // not required
		return nil
	}

	for i := 0; i < len(m.Qs); i++ {
		if swag.IsZero(m.Qs[i]) { // not required
			continue
		}

		if m.Qs[i] != nil {
			if err := m.Qs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("qs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("qs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APISurveyResponse) validateStartSurvey(formats strfmt.Registry) error {
	if swag.IsZero(m.StartSurvey) { // not required
		return nil
	}

	if err := validate.FormatOf("startSurvey", "body", "date-time", m.StartSurvey.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api survey response based on the context it is used
func (m *APISurveyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APISurveyResponse) contextValidateQs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Qs); i++ {

		if m.Qs[i] != nil {

			if swag.IsZero(m.Qs[i]) { // not required
				return nil
			}

			if err := m.Qs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("qs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("qs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APISurveyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APISurveyResponse) UnmarshalBinary(b []byte) error {
	var res APISurveyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
